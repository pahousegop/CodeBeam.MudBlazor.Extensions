@namespace MudExtensions
@typeparam T
@inherits MudComponentBase
@using MudBlazor

<div @attributes="UserAttributes" id="@_elementId" class="@Classname" style="@Stylename" tabindex="-1" @onkeydown="HandleKeyDownAsync" @onfocusout="HandleOnFocusOut" @onscroll="HandleOnScroll">
    <CascadingValue Value="@this" IsFixed="true">
        @if (MultiSelection && SelectAll && SelectAllPosition == SelectAllPosition.BeforeSearchBox && ParentList == null)
        {
            @if (SelectAllTemplate != null)
            {
                <div class="mud-ripple" @onclick="@(() => SelectAllItems(_allSelected))" tabindex="-1">
                    @SelectAllTemplate
                </div>
            }
            else
            {
                <MudListItemExtended T="T" IsFunctional="true" Icon="@SelectAllCheckBoxIcon" IconColor="@Color" Text="@SelectAllText" OverrideMultiSelectionComponent="MultiSelectionComponent.None" OnClick="@(() => SelectAllItems(_allSelected))" OnClickHandlerPreventDefault="true" Dense="@Dense" Class="mb-2" />
                <MudDivider />
            }
        }

        @if (ItemCollection != null)
        {
            @if (SearchBox == true)
            {
                <MudListSubheaderExtended T="T" Style="position: sticky; top: -8px; padding-top: 8px; margin-top: -8px; background-color: var(--mud-palette-background); z-index: 10">
                    
                    <div @onkeydown:stopPropagation class="mud-list-item-extended">
                        @if (MultiSelection && SelectAll && SelectAllPosition == SelectAllPosition.NextToSearchBox && ParentList == null)
                        {
                            <MudCheckBox CheckedIcon="@SelectAllCheckBoxIcon" Color="@Color" @bind-Value="_allSelected" @onclick="() => SelectAllItems(_allSelected)" Dense="true" />
                        }
                        <MudTextField T="string" @ref="_searchField" @bind-Value:get="_searchString" @bind-Value:set="SearchChanged" Class="@ClassSearchBox" Placeholder="@SearchBoxPlaceholder" OnKeyDown="SearchBoxHandleKeyDownAsync" OnKeyUp="@(() => UpdateSelectedStyles())" OnClearButtonClick="@(() => UpdateSelectedStyles())" Immediate="true" Variant="SearchBoxVariant" Margin="Margin.Dense"
                            Adornment="SearchBoxAdornment" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color" AutoFocus="@SearchBoxAutoFocus" Clearable="@SearchBoxClearable" />
                    </div>
                </MudListSubheaderExtended>
                @if (MultiSelection && SelectAll && SelectAllPosition == SelectAllPosition.AfterSearchBox && ParentList == null)
                {
                    <MudListItemExtended T="T" IsFunctional="true" Icon="@SelectAllCheckBoxIcon" IconColor="@Color" Text="@SelectAllText" OverrideMultiSelectionComponent="MultiSelectionComponent.None" OnClick="@(() => SelectAllItems(_allSelected))" OnClickHandlerPreventDefault="true" Dense="@Dense" Class="mb-2" />
                    <MudDivider />
                }
            }
            <MudVirtualize Enabled="@Virtualize" Items="GetSearchedItems()" Context="item" OverscanCount="@OverscanCount">
                @if (MudSelectExtended != null)
                {
                    <MudSelectItemExtended Value="@item" Text="@(ToStringFunc == null ? item?.ToString() : ToStringFunc(item))" />
                }
                else
                {
                    <MudListItemExtended Value="@item" @ondblclick="@(() => OnDoubleClickHandler(new MouseEventArgs(), item))" Text="@(ToStringFunc == null ? item?.ToString() : ToStringFunc(item))" />
                }
            </MudVirtualize>
        }
        else
        {
            @ChildContent
        }
    </CascadingValue>
</div>
