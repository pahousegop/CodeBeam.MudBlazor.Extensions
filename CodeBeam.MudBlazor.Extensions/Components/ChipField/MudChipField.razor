@namespace MudExtensions
@inherits MudTextFieldExtended<T>
@typeparam T

<MudTextFieldExtended @ref="_textFieldExtendedReference"
                      T="T"
                      Immediate="true"
                      OnKeyDown="HandleKeyDown"
                      OnKeyUp="HandleKeyUp"
                      OnBlur="@(async() => await OnBlur.InvokeAsync())"
                      OnClearButtonClick="@(async() => await OnClearButtonClick.InvokeAsync())"
                      OnDebounceIntervalElapsed="@(async() => await OnDebounceIntervalElapsed.InvokeAsync())"
                      OnInternalInputChanged="@(async() => await OnInternalInputChanged.InvokeAsync())"
                      ShrinkLabel="@(Values?.Any() ?? false)"
                      Clearable="@Clearable"
                      AutoFocus="@AutoFocus"
                      Class="@Class"
                      Style="@Style"
                      Converter="@Converter"
                      Counter="@Counter"
                      Culture="@Culture"
                      DebounceInterval="@DebounceInterval"
                      Disabled="@Disabled"
                      Underline="@Underline"
                      Error="@Error"
                      ErrorId="@ErrorId"
                      ErrorText="@ErrorText"
                      For="@For"
                      Format="@Format"
                      FullWidth="@FullWidth"
                      HelperText="@HelperText"
                      HelperTextOnFocus="@HelperTextOnFocus"
                      Label="@Label"
                      Margin="@Margin"
                      MaxLength="@MaxLength"
                      OnlyValidateIfDirty="@OnlyValidateIfDirty"
                      ReadOnly="@ReadOnly"
                      Placeholder="@Placeholder"
                      Required="@Required"
                      RequiredError="@RequiredError"
                      Validation="@Validation"
                      Variant="@Variant"
                      @bind-Value="@_internalValue"
                      TextChanged="@(async() => await TextChanged.InvokeAsync())"
                      ShowVisualiser="@(Values?.Any() ?? false)">

    <DataVisualiser>
        <MudChipSet T="T" Class="@ChipClassname" Style="@ChipStylename" AllClosable="@Closeable" OnClose="Closed">
            @for (int i = 0; i < (MaxChips == 0 ? Values?.Count ?? 0 : (MaxChips < (Values?.Count ?? 0) ? MaxChips : Values?.Count ?? 0)); i++)
            {
                int a = i;
                <MudChip T="T" Class="@ClassChip" Style="@StyleChip" Ripple="false" Text="@(Values != null ? Values[a] : string.Empty)" Color="@ChipColor" Variant="@ChipVariant" Size="@ChipSize" Disabled="@Disabled" />
            }
        </MudChipSet>
        @if (Values != null && MaxChips != 0 && MaxChips < Values.Count)
        {
            <MudChip T="T" Ripple="false" Text="@($"+{Values.Count - MaxChips}")" Color="@ChipColor" Variant="@ChipVariant" Size="@ChipSize" Disabled="@Disabled" />
        }
    </DataVisualiser>

    <AdornmentEnd>
        @AdornmentEnd
    </AdornmentEnd>

</MudTextFieldExtended>
